"use strict";

var logger = require("logger"),
	path = require("path");

var Context = module.exports = function(request, response, next, view) {
	this.host = request.headers.host;
	this.session = request.session;
	this.method = request.method.toLowerCase();
	this.ip = request.ip;
	this.files = request.files;

	this.redirect = response.redirect.bind(response);
	this.render = response.render.bind(response);
	this.sendresponse = response.send.bind(response);
	this.json = response.json.bind(response);
	this.next = next;
	this.viewInfo = view;

	this.data = null;
	this.responseFormat = "text";

	this.response = response;
};

/**
 * Render and send view to client
 * @param {Object} [model] Data model for view
 * @param {String} [viewPath] Path to view if it not equals defined view path
 */
Context.prototype.view = function(model, viewPath) {
	var view = viewPath || (this.viewInfo.path && this.viewInfo.name ? path.join(this.viewInfo.path,this.viewInfo.name): null);
	if (!view)
		this.handleError('Not found view for render',new Error('Not found view for render'));
	else{
		if (view.indexOf('/') === -1 && view.indexOf('\\') === -1)
			view = path.join(this.viewInfo.path, view);
		this.render(view, model || {});
	}
};

Context.prototype.handleError = function(message, error) {
	logger.writeError(message, error);
	this.sendresponse(500, "Server Error");
};

/**
 * Show custom message to user
 * @param {String} title Title of message
 * @param {String} message Message text
 * @param {String} redirect Url to Redirect after show
 */
Context.prototype.showMessage = function(title, message, redirect){
	redirect = redirect || "";
	if (redirect.length === 0 || redirect[0] != "/" && redirect.toLowerCase().indexOf("http") != 0)
		redirect += "/";
	var model = {
		data: {
			title: title,
			message: message,
			redirect: redirect
		}
	};
	this.view(model,path.join('home','views','messages','custom'));
};

/**
 * Send error to client
 * @param {Number} code Code of error message
 * @param {String} name Title of message
 * @param {String} message Message text
 * @param {String} redirect Url to Redirect after show
 */
Context.prototype.sendError = function(code, name, message, redirect){
	if (this.responseFormat === "json"){
		this.json({status: false, error: '#'+code+" \""+name+"\" "+message});
	}else{
		var model = {
			data: {
				title:  '#'+code+" \""+name+"\"",
				message: message,
				redirect: redirect
			}
		};
		this.view(model,path.join('home','views','messages','custom'));
	}
}

/**
 * Send response to client
 * @param {Object} [model] Data model for view
 * @param {String} [viewPath] Path to view if it not equals defined view path
 */
Context.prototype.send = function(model, viewPath){
    model = model || {};
    model.user = this.session.user || {};
	if (this.responseFormat === "json"){
		this.json({status: true, response: model});
	}else{
		this.view(model, viewPath);
	}
};