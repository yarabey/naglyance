"use strict";

var path = require("path"),
	fs = require("fs"),
	mongo = require("mongodb"),
	config = require("config"),
	logger = require("logger"),
	tool = require("tool"),
	errors = require("errors");

var db = null;

var handleError = function(message, error) {
	if(db !== null) {
		logger.writeError(message, error);
	}
};

/**
 * Executes stored script
 * @param {String} name Script name
 * @param {Object} args Script args
 * @param {Function} [callback] Function deliver data.
 * Args are (isError: Boolean, data: Object)
 */
exports.executeStoredScript = function(name, args, callback) {
	var dbc = config.mongo.db;
	callback = callback || function(){};
	var body = "function(args) {return " + name + "(args)}";
	db.eval(body, args, function(error, result) {
		result = result || {};
		if(error) {
			var message = (db.state === "disconnected") ?
				"DB state is disconnected" :
				"Script '" + name + "' do not executed";
			handleError(message, error);
			var resultError = errors.get(100);
			resultError.message = resultError.message.
				replace('#{name}',name).
				replace('#{args}', JSON.stringify(args)).
				replace('#{error}', JSON.stringify({code: error.code, message: error.message}));
			callback(resultError, null);
			return;
		}
		if (result.error){
			var message = "Script '" + name + "' do executed with error: #"+result.error.code;
			handleError(message, {args: args, error: result.error});
			callback(result.error, null);
			return;
		}
		callback(false, result.response);
	});
};

exports.init = function(callback) {
	callback = callback || function(){};
	if(db !== null) return;
	var list = require("../app_data/collections.json"),
		defaults = {
			settings: require("../app_data/settings.json")
		};

	var dirPath = path.join(config.app.rootPath, "db_scripts"),
		fileNames = fs.readdirSync(dirPath),
		filePath, dbScripts, scripts = [];
	fileNames.forEach(function(fileName) {
		filePath = path.join(dirPath, fileName);
		dbScripts = require(filePath);
		fileName = fileName.slice(0, -3);
		tool.foreach(dbScripts, function(v, p) {
			scripts.push({_id: fileName + "_" + p, value: v});
		});
	});

	var sr = config.mongo.server,
		server = new mongo.Server(sr.host, sr.port, sr.options),
		dbc = config.mongo.db;
	db = new mongo.Db(dbc.name, server, dbc.options);
	db.on("close", function(error) {
		handleError("DB state is closed", error || {});
	});

	var initializeStoredScripts = function(collection) {
		collection.remove({}, {safe: true}, function(error) {
			if(error) {
				var message = "Scripts not removed";
				handleError(message, exception);
				return;
			}

			collection.insert(scripts, {serializeFunctions: true}, function(error) {
				if(error) {
					var message = "Scripts not stored";
					handleError(message, error);
				}
				callback(null);
			});
		});
	};

	var initializeCollections = function() {
		var onCreatedCollection = function(method, error, declaration, collection) {
			var cname = declaration.name;
			if(error) {
				var message;
				if(method === "find")message = "Collection '" + cname + "' not find";
				else if("create")message = "Collection '" + cname + "' not created";
				else message = "Method '" + method + "' unknown";
				handleError(message, error);
				return;
			}

			if(cname === "system.js") {
				initializeStoredScripts(collection);
				return;
			}

			collection.dropAllIndexes(function(error) {
				if(error) {
					var message = "Indexes not dropped";
					handleError(message, error);
					return;
				}

				var indexes = declaration.indexes;
				if(indexes) {
					collection.ensureIndex(indexes, function(error) {
						if(error) {
							var message = "Indexes for collection '" + cname + "' not created";
							handleError(message, error);
						}
					});
				}
			});
/*
			var isApplications = (cname === "applications"),
				isSettings = (cname === "settings"),
				isTrusts = (cname === "trusts");
			if(isSettings || isApplications || isTrusts) {
				if(dbc.safeTargetValue) {
					collection.find().toArray(function(error, docs) {
						if(error) {
							var message = "Items for collection '" + cname + "' is not found";
							handleError(message, error);
						}

						if(docs && docs.length > 0) {
							var result;

							if(isSettings) {
								defaults.settings.forEach(function(setting) {
									result = tool.findOne(docs, {key: setting.key});
									if(result.index < 0) {
										collection.insert(setting);
									}
								});
							}

							if(isApplications) {
								defaults.applications.forEach(function(application) {
									result = tool.findOne(docs, {name: application.name});
									if(result.index < 0) {
										collection.insert(application);
										return;
									}

									var dbApplication = result.value;
									tool.extend(dbApplication, application, true);
									collection.save(dbApplication);
								});
							}

							if(isTrusts) {
								defaults.trusts.forEach(function(trust) {
									result = tool.findOne(docs, {ip: trust.ip});
									if(result.index < 0) {
										collection.insert(trust);
										return;
									}

									var dbTrust = result.value;
									tool.extend(dbTrust, trust, true);
									collection.save(dbTrust);
								});
							}

						} else {
							collection.insert(defaults[cname]);
						}
					});
				} else {
					collection.remove({}, {safe: true}, function(error) {
						if(error) {
							var message = "Items for collection '" + cname + "' is not removed";
							handleError(message, error);
						}

						collection.insert(defaults[cname]);
					});
				}

			}*/
		};

		db.collectionNames(null, function(error, items) {
			if(error) {
				var message = "Collections names not found";
				handleError(message, error);
				return;
			}

			var existsNames = [], ns = db.databaseName + ".", name;
			if(items) {
				items.forEach(function(item) {
					name = item.name.replace(ns, "");
					if(name.indexOf("system") > -1 && name !== "system.js")  return;
					existsNames.push(name);
				});
			}

			list.forEach(function(declaration) {
				var cname = declaration.name;
				var index = existsNames.indexOf(cname);
				if(index >= 0) {
					db.collection(cname, function(error, collection) {
						onCreatedCollection("find", error, declaration, collection);
					});
				} else {
					db.createCollection(cname, function(error, collection) {
						onCreatedCollection("create", error, declaration, collection);
					});
				}
			});
		});
	};

	db.open(function(error, connection) {
		if(error) {
			var message = "Database '" + db.databaseName + "' not opened";
			logger.writeError(message, error);
			return;
		}
        initializeCollections();
	});
};