"use strict";

var tools = require('tool'),
	Context = require('context'),
	config = require('config'),
	fs = require('fs'),
	path = require('path'),
	validator = require("validation"),
	util = require("util"),
	logger = require("logger");

var redirect404 = function(res, code) {
	code = code || 302;
	res.redirect(code, "/home/error/404");
};

exports.http = function(req, res, next) {
	var rootPath = config.app.rootPath,
		url = req.path,
		method = req.method.toLowerCase(),
		defaultArea = "home",
		defaultName = "default",
		authPage = "/" + defaultArea + "/auth",
		responseFormat = "text";




	/*
	 * Get action object
	 */
	var paths = url.split("/"),
		areaName = defaultArea,
		controllerName = defaultName,
		actionName = defaultName;
    /*
     * Redirect to default home page
     */

    if (url === '/'){
        paths = tools.removeArrayElement(paths, 0);
    }

	if (paths[0] === "")
		paths = tools.removeArrayElement(paths, 0);

	if (paths.length > 0)
		areaName = paths[0];
	paths = tools.removeArrayElement(paths, 0);
	if (paths.length > 0)
		controllerName = paths[0] || controllerName;
	paths = tools.removeArrayElement(paths, 0);
	if (paths.length > 0){
		actionName = paths[0] || actionName;
		paths = tools.removeArrayElement(paths, 0);
	}

    var areaSplit = areaName.split('-');
    if (areaSplit[0] == 'album') {
        req.body.id = areaSplit[1];
        areaName = 'home';
        controllerName = 'album';
        actionName = 'default';
    }

	var requiepath = "./areas/" + areaName + "/controllers/" + controllerName;
	/*
	 * Try to get controller
	 */
    console.log(method.toUpperCase() + ': ' + url);
	var controller, action;
	try{
		controller = require(path.join(rootPath, requiepath));
	}catch(e) {
		redirect404(res);
    	return;
	}

	/*
	 * Get response format
	 */
	actionName = actionName.split('.');
	responseFormat = actionName[1];
	if (responseFormat !== "json" && responseFormat !== "text")
		responseFormat = "text";
	actionName = actionName[0];

	/*
	 * Try to find action
	 */
	var controllerActionName = method + tools.capitalise(actionName);
	action = controller[controllerActionName];
	if (!action){
		redirect404(res);
		return;
	}


	/*
	 * Get meta information about controller
	 */
	var info = {};
	if (controller["info"])
		info = controller.info();
	info.permissions = info.permissions || {};

	/*
	 * Default information for controller and current action
	 */
	var defaultInfo = {permissions: {all: false}};
	defaultInfo.actions = {};
	defaultInfo.actions[controllerActionName] = {permissions: info.permissions};
	info = tools.extendDefaultOptions(info, defaultInfo);
	var actionInfo = info.actions[controllerActionName];

    //if (req.session.user)
        //console.log(req.session.user.email);
	/*
	 * Check permissions
	 */
//	if (!actionInfo.permissions.all && !req.session.user){
//		res.redirect(authPage);
//		return;
//	}
	
	/*
	 * Check user role
	 */
//	 if (actionInfo.permissions.role){
//	 	if (actionInfo.permissions.role !== req.session.user.role){
//	 		res.redirect(authPage);
//			return;
//		}
//	 }

	/*
	 * summary 'get' and 'post' data
	 */
	var clientData = {}, actionData = actionInfo.data;
	if(actionData) {
		for(var p in actionData) {
			if(actionData.hasOwnProperty(p)) {
				switch(p) {
					case "path":
						var args = paths,
							argsLength = args.length;
						actionData.path.forEach(function(name, i) {
							if(i >= argsLength) return;
							clientData[name] = args[i];
						});
						break;
					case "query":
						var query = req.query || {};
						actionData.query.forEach(function(name) {
							clientData[name] = query[name];
						});
						break;
					case "body":
						if(actionData.body) {
							tools.extend(clientData, req.body);
						}
						break;
				}
			}
		}
	}

	/*
	 * Find view
	 */
	var viewInfo = {path: path.join(rootPath, "./areas", areaName, "views", controllerName)};
	if (fs.existsSync(path.join(viewInfo.path, method + tools.capitalise(actionName) + '.jade')))
		viewInfo.name =  method + tools.capitalise(actionName);
	else if (fs.existsSync(path.join(viewInfo.path, actionName + '.jade')))
		viewInfo.name =  actionName;

	/*
	 * Create context
	 */
	var context = new Context(req, res, next, viewInfo);
	context.responseFormat = actionInfo.responseFormat || responseFormat;
	/*
	 * validate client data
	 */
	if(actionData) {
		var modelPath = path.join(rootPath, "./areas", areaName, "models", actionInfo.model),
			Model = require(modelPath),
			model = new Model(controllerName, controllerActionName, clientData);

		try {
			validator.validate(clientData, model);
		} catch (error) {
			var message = ["Validation error for path '", url, "'"];
			message.push("\n", "client data ", util.inspect(clientData, false, null, false));
			message.push("\n", "model ", util.inspect(model, false, null, false));
			logger.writeError(message.join(""), error);
			res.send(500, "Server Error");
			return;
		}
		var errorMessages = validator.errors();
		if(errorMessages.length > 0) {
			context.sendError(2,"Введенные данные имеют не верный формат", errorMessages.join(", "), actionInfo.validationRedirect || "");
			return;
		}else{
			context.data = clientData;
		}
	}
	/*
	 * Execute Action
	 */
	action(context);
};
