"use strict";

var http = require("http"),
	path = require("path"),
	fs = require("fs"),
	logger = require("logger"),
	jade = require("jade"),
	config = require("config"),
	rootPath = config.app.rootPath;

/**
 * Finds object in array.
 *
 * @param {Array} array
 * @param {Object} query
 *
 * @return {Object} { index: -1, value: null }
 */
exports.findOne = function(array, query) {
	var queryKeys = Object.keys(query),
		queryLength = queryKeys.length,
		arrayLength = array.length,
		result = { index: -1, value: null },
		equalLength, item;
	for(var i = 0; i < arrayLength; i++) {
		equalLength = 0;
		item = array[i];
		queryKeys.forEach(function(key) {
			if(item[key] === query[key])equalLength++;
		});
		if(equalLength === queryLength) {
			result.index = i;
			result.value = item;
			break;
		}
	}
	return result;
};

/**
 * Check source string value on null or white space
 *
 * @param {String} sourceString
 * @return {Boolean}
 */
exports.isNullOrWhiteSpace = function(sourceString) {
	if(!sourceString)return true;
	var result = sourceString.trim();
	return result === "";
};

var extendObject = function(target, source, safeTargetValue) {
	if(!source)return;
	var tgt, src;
	for(var property in source) {
		if(source.hasOwnProperty(property)) {
			src = source[property];
			if(src && src.constructor === Object) {
				tgt = target[property];
				if(!tgt) tgt = target[property] = {};
				extendObject(tgt, src);
			} else {
				if(safeTargetValue) {
					if(!target.hasOwnProperty(property)) {
						target[property] = src;
					}
				} else {
					target[property] = src;
				}
			}
		}
	}
};

/**
 * Extends target object from source object
 *
 * @param {Object} target
 * @param {Object} source
 * @param {Boolean} [safeTargetValue]
 *      If true - not change target object property value
 */
exports.extend = function(target, source, safeTargetValue) {
	extendObject(target, source, safeTargetValue);
};

/**
 * Source array or object iterate
 *
 * @param source Array or Object
 * @param {Function} callback
 *      Method with args: value, index for array or property name for object.
 *      If return false - break iterate
 */
exports.foreach = function(source, callback) {
	if(source.constructor === Array) {
		for(var i = 0, length = source.length; i < length; i++) {
			if(callback(source[i], i) === false) break;
		}
	} else {
		for(var p in source) {
			if(source.hasOwnProperty(p)) {
				if(callback(source[p], p) === false) break;
			}
		}
	}
};

/**
 * Render text with jade engine
 * @param {String} tmplPath Path of template from root
 * @param {Object} model Data for rendering
 * @param {Boolean} isPretty true - indentation, whitespace to output, false - otherwise
 * @param {Function} callback Deliver result, args is String
 */
exports.render = function(tmplPath, model, isPretty, callback) {
	var fullPath = path.join(rootPath, tmplPath);
	fs.readFile(fullPath, "utf8", function(error, data) {
		if(error) {
			var message = "Cannot read file '" + fullPath + "'";
			logger.writeError(message, error);
			callback(null);
			return;
		}

		var fn = null, result = null;
		try {
			// filename - used in exceptions, and required when using includes
			// pretty - add pretty-indentation whitespace to output
			fn = jade.compile(data, {filename: fullPath, pretty: isPretty});
			result = fn(model);
		} catch (error) {
			var msg = ["Jade compile or render error, path:'", tmplPath, "', model: ", JSON.stringify(model)];
			logger.writeError(msg.join(""), error);
		}
		callback(result);
	});
};

/**
 * Does http request to server
 * @param {Object} options To data
 *      fields = {
 *          hostname: String, port: Number, path: String, method: String
 *      }
 * @param {Object} postData Post data
 * @param {String} resFormat Response data format: 'json', 'text'
 * @param {Function} callback Deliver result, args is String
 */
exports.doRequest = function(options, postData, resFormat, callback) {
	var onResponse = function(response) {
		response.setEncoding("utf8");
		var responseData = [];
		response.on("data", function(chunk) {
			responseData.push(chunk);
		});
		response.on("end", function() {
			var data = responseData.join("");
			if(resFormat === "json") {
				try {
					data = JSON.parse(data);
				} catch (error) {
					var message = "Response data from " + options.hostname + " has bad json";
					logger.writeError(message, error);
					data = null;
				}
			}
			callback(data);
		});
	};
	var onError = function(error) {
		var message = "Request to " + options.hostname + " has problems";
		logger.writeError(message, error);
		callback(null);
	};

	var pairs = [], postDataString;
	exports.foreach(postData, function(v, p) {
		pairs.push(p + "=" + encodeURIComponent(v));
	});
	postDataString = pairs.join("&");

	if(options.method === "GET") {
		options.path = options.path + "?" + postDataString;
	}

	var request = http.request(options, onResponse);
	request.on("error", onError);
	if(options.method === "POST") {
		request.write(postDataString);
	}
	request.end();
};

/**
 * Remove element from Array
 * @param {Array} array Source array
 * @param {Number} index Index of element witch need to remove
 * @returns {Array}
 */
exports.removeArrayElement = function(array, index){
	array.splice(index, 1);
	return array;
};


/**
 * Uppercase first latter in first word
 * @param {String} s Source string
 * @returns {String}
 */
exports.capitalise = function(s){
	return s.charAt(0).toUpperCase() + s.slice(1);
}

var extendDefaultOptions = function(options, defaultOptions){
	var key;
	if (typeof options === 'object') {
		for (key in defaultOptions) {
			if(defaultOptions.hasOwnProperty(key))
				options[key] = extendDefaultOptions(options[key], defaultOptions[key]);
		}
		return options;
	} else if (options != null)
		return options;
	else
		return defaultOptions;
};

/**
 * Extend options with default params
 * @param {Object} options Source object
 * @param {Object} defaultOptions Default values for options
 * @returns {Object}
 */
exports.extendDefaultOptions = function(options, defaultOptions){
 	return extendDefaultOptions(options, defaultOptions);
};