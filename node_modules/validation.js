"use strict";

var tool = require("tool"),
	_v = require("validator"),
	Validator = _v.Validator,
	Filter = _v.Filter;

//
// Validator extend
//
Validator.prototype.error = function(message) {
	this._errors.push(message);
	return this;
};

Validator.prototype.getErrors = function() {
	return this._errors || [];
};

Validator.prototype.clearErrors = function() {
	this._errors = [];
};

var validator = new Validator();

//
// Filter extend
//

Filter.prototype.emptyString = function() {
	this.modify("");
	return this.str;
};

Filter.prototype.carnumber = function() {
	this.modify(this.str.replace(/\s/g, "").toUpperCase());
	return this.str;
};

Filter.prototype.phonenumber = function() {
	this.modify(this.str.replace(/\-|\s/g, ""));
	return this.str;
};


var filter = new Filter();

var convert = function(value, schema) {
	if(!schema) return value;
	var result = value;
	tool.foreach(schema, function(v, p) {
		filter.modify(result);
		result = filter[p].apply(filter, v.args);
	});
	return result;
};

var validate = function(value, schema) {
	if(!schema) return;
	tool.foreach(schema, function(v, p) {
		validator.check(value, v.message);
		validator[p].apply(validator, v.args);
	});
};

var complexValidate = function(value, model) {
	var sourceValue, sv, sf, type;
	tool.foreach(model, function(schemaValue, p) {
		sourceValue = value[p];
		sv = schemaValue.validator;
		sf = schemaValue.filter;
		type = schemaValue.type;
		if(sv || sf) {
			validate(sourceValue, sv);
			if(validator.getErrors().length < 1) {
				model[p] = convert(sourceValue, sf);
			}
		} else if(type) { // value is array, where item is type
			var values = [];
			tool.foreach(sourceValue, function(v, i) {
				validate(v, type.validator);
				if(validator.getErrors().length < 1) {
					values.push(convert(v, type.filter));
				}
			});
			model[p] = values;
		} else { // object value
			complexValidate(sourceValue, schemaValue);
		}
	});
};

exports.validate = function(value, model) {
	validator.clearErrors();
	complexValidate(value, model);
};

exports.errors = function() {
	return validator.getErrors();
};